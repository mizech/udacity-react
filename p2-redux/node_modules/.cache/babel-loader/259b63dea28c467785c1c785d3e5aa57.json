{"ast":null,"code":"import _defineProperty from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Library/WebServer/Documents/p2-would-you/src/components/AddQuestion/AddQuestion.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Navbar from \"./../Navbar/Navbar\";\nimport { handleAddQuestion } from \"./../../actions/questions\";\nimport \"./AddQuestion.css\";\n\nvar AddQuestion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddQuestion, _Component);\n\n  function AddQuestion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddQuestion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddQuestion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      optionOne: \"\",\n      optionTwo: \"\",\n      errorOccurred: false\n    };\n    return _this;\n  }\n\n  _createClass(AddQuestion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.props.username) {\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        });\n      }\n\n      var handleOptionChanged = function handleOptionChanged(event, option) {\n        _this2.setState(_defineProperty({}, option, event.target.value));\n      };\n\n      var handleInsert = function handleInsert() {\n        if (_this2.state.optionOne.length === 0 || _this2.state.optionTwo.length === 0) {\n          _this2.setState({\n            errorOccurred: true\n          });\n\n          return;\n        }\n\n        _this2.props.handleAddQuestion(_this2.state.optionOne, _this2.state.optionTwo);\n      };\n\n      console.log(this.state);\n      var errorMessage = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Please enter an option in both input controls!\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Would you rather ... ?\"), React.createElement(\"div\", {\n        className: \"label-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"optionOne\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Option One: \"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"optionOne\",\n        placeholder: \"Enter here the first option ...\",\n        onChange: function onChange(event) {\n          handleOptionChanged(event, \"optionOne\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"label-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"optionTwo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Option Two: \"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"optionTwo\",\n        placeholder: \"Enter here the second option ...\",\n        onChange: function onChange(event) {\n          handleOptionChanged(event, \"optionTwo\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Insert question\"));\n    }\n  }]);\n\n  return AddQuestion;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    username: state.authedUser.username\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    handleInsert: function handleInsert(optionOne, optionTwo) {\n      dispatch(handleAddQuestion(optionOne, optionTwo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestion);","map":{"version":3,"sources":["/Library/WebServer/Documents/p2-would-you/src/components/AddQuestion/AddQuestion.js"],"names":["React","Component","connect","Redirect","Navbar","handleAddQuestion","AddQuestion","state","optionOne","optionTwo","errorOccurred","props","username","handleOptionChanged","event","option","setState","target","value","handleInsert","length","console","log","errorMessage","mapStateToProps","authedUser","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Navbar from \"./../Navbar/Navbar\";\nimport { handleAddQuestion } from \"./../../actions/questions\";\nimport \"./AddQuestion.css\";\n\nclass AddQuestion extends Component {\n  state = {\n      optionOne: \"\",\n      optionTwo: \"\",\n      errorOccurred: false\n  }\n\n  render() {\n    if (!this.props.username) {\n        return <Redirect to=\"/\" />\n    }\n\n    const handleOptionChanged = (event, option) => {\n        this.setState({\n            [option]: event.target.value\n        });\n    }\n\n    const handleInsert = () => {\n        if (this.state.optionOne.length === 0 || this.state.optionTwo.length === 0) {\n            this.setState({\n                errorOccurred: true\n            });\n\n            return;\n        }\n\n        this.props.handleAddQuestion(this.state.optionOne, this.state.optionTwo);\n    }\n\n    console.log(this.state);\n\n    let errorMessage = <div className=\"error\">Please enter an option in both input controls!</div>\n\n    return (\n      <div>\n        <Navbar />\n        <h1>Would you rather ... ?</h1>\n        <div className=\"label-input\">\n            <label htmlFor=\"optionOne\">Option One: </label>\n            <input type=\"text\" id=\"optionOne\" \n                    placeholder=\"Enter here the first option ...\" \n                    onChange={(event) => {\n                        handleOptionChanged(event, \"optionOne\");\n                    }} />\n        </div>\n        <div className=\"label-input\">\n            <label htmlFor=\"optionTwo\">Option Two: </label>\n            <input type=\"text\" id=\"optionTwo\" \n                    placeholder=\"Enter here the second option ...\" \n                    onChange={(event) => {\n                        handleOptionChanged(event, \"optionTwo\");\n                    }} />\n        </div>\n        <button>Insert question</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username: state.authedUser.username\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleInsert: (optionOne, optionTwo) => {\n            dispatch(handleAddQuestion(optionOne, optionTwo));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestion);"]},"metadata":{},"sourceType":"module"}