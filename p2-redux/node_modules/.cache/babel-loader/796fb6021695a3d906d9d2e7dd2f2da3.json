{"ast":null,"code":"import _objectWithoutProperties from \"/Library/WebServer/Documents/p2-would-you/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Library/WebServer/Documents/p2-would-you/src/components/App/PrivateRoute.js\";\nimport { Redirect, Route } from 'react-router-dom';\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nvar isValidUserObject = function isValidUserObject(authedUserObject) {\n  for (var key in authedUserObject) {\n    if (authedUserObject.hasOwnProperty(key)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nvar PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      isUserSignedIn = _ref.isUserSignedIn,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"isUserSignedIn\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return isUserSignedIn ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }))) : React.createElement(Redirect, {\n        to: {\n          pathname: '/login',\n          state: {\n            from: props.location\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(_ref2) {\n  var authedUser = _ref2.authedUser;\n  return {\n    isUserSignedIn: isValidUserObject(authedUser)\n  };\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false\n})(PrivateRoute);","map":{"version":3,"sources":["/Library/WebServer/Documents/p2-would-you/src/components/App/PrivateRoute.js"],"names":["Redirect","Route","React","Fragment","connect","isValidUserObject","authedUserObject","key","hasOwnProperty","PrivateRoute","Component","component","isUserSignedIn","rest","props","pathname","state","from","location","mapStateToProps","authedUser","pure"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,gBAAD,EAAsB;AAC5C,OAAK,IAAIC,GAAT,IAAgBD,gBAAhB,EAAkC;AAC9B,QAAIA,gBAAgB,CAACE,cAAjB,CAAgCD,GAAhC,CAAJ,EAA0C;AACtC,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ;AACJ,CARD;;AAUA,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAeC,SAAf,QAAIC,SAAJ;AAAA,MAA0BC,cAA1B,QAA0BA,cAA1B;AAAA,MAA6CC,IAA7C;;AAAA,SACjB,oBAAC,KAAD,oBAAYA,IAAZ;AAAmB,IAAA,MAAM,EAAE,gBAACC,KAAD,EAAW;AAClC,aACIF,cAAc,GAEV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD,oBAAgBE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CAFU,GAKR,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AACZC,UAAAA,QAAQ,EAAE,QADE;AAEZC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAFK,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANV;AAWH,KAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiB;AAAA,CAArB;;AAgBA,SAASC,eAAT,QAAuC;AAAA,MAAbC,UAAa,SAAbA,UAAa;AACnC,SAAO;AACHR,IAAAA,cAAc,EAAEP,iBAAiB,CAACe,UAAD;AAD9B,GAAP;AAGH;;AAED,eAAehB,OAAO,CAACe,eAAD,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B;AAACE,EAAAA,IAAI,EAAE;AAAP,CAA9B,CAAP,CAAqDZ,YAArD,CAAf","sourcesContent":["import { Redirect, Route } from 'react-router-dom';\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nconst isValidUserObject = (authedUserObject) => {\n    for (let key in authedUserObject) {\n        if (authedUserObject.hasOwnProperty(key)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nconst PrivateRoute = ( { component: Component, isUserSignedIn, ...rest } ) => (\n    <Route { ...rest } render={(props) => {\n        return (\n            isUserSignedIn\n                ?\n                <Fragment>               \n                    <Component { ...props }/>                        \n                </Fragment>\n                : <Redirect to={{\n                    pathname: '/login',\n                    state: { from: props.location }\n                }}/>\n        )\n    }}/>\n)\n\nfunction mapStateToProps({authedUser}) {\n    return {\n        isUserSignedIn: isValidUserObject(authedUser)\n    }\n}\n\nexport default connect(mapStateToProps, null, null, {pure: false,})(PrivateRoute)"]},"metadata":{},"sourceType":"module"}